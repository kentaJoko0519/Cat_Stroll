<!--『POST』-->

<div class="container">
  <div class="row">
<!--ーーーーーーーーーーーーーーーーーーーーーーーーーー（Google Map）ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー-->
    <div class="col-md-12 text-center">
      <!--Google Mapのスタイル-->
      <style>
          #map { height: 400px; width: 100%;}
          @media screen and (max-width: 767.98px) {
            #map { height: 350px; }
          }
      </style>

      <!--地図検索-->
      <div class="col-12 col-md-12 my-3 mt-5">
        <i class="fas fa-search-location fa-lg"></i>
        <input id="address" class="search-box" type="textbox">
        <input type="button" value="検索" onclick="codeAddress()">
      </div>

      <!--Google Map-->
      <div class="row">
        <div class="col-12 col-md-8 mx-auto">
          <div id="map" class="d-inline-flex justify-content-center"></div>
        </div>
      </div>

      <!--地図のjs-->
      <script>
        let map, infoWindow, geocoder, marker;
  // 【マップの表示・設定】
        function initMap() {
          geocoder = new google.maps.Geocoder(); // ジオコーディングができるようにしておく
          map = new google.maps.Map(document.getElementById("map"), {
            center: { lat: 35.6811673, lng: 139.7670516 },    //地図の中心座標
            zoom: 15,      //地図の縮尺値
            mapTypeId: 'roadmap'   //地図の種類
          });
          infoWindow = new google.maps.InfoWindow();
        
  // 【現在位置表示のボタン】
          const locationButton = document.createElement("button");
          // ボタンのテキスト
          locationButton.textContent = "現在地へ";
          // ボタンにクラスを追加。javascript / stylesheets / application.scss にスタイル設定
          locationButton.classList.add("custom-map-control-button");
          //ボタンをマップに表示
          map.controls[google.maps.ControlPosition.TOP_CENTER].push(locationButton);
          // ボタンクリック時のイベント
          locationButton.addEventListener("click", () => {
            // ブラウザがGeolocation APIに対応しているかのチェック
            if (navigator.geolocation) {
              // 対応している場合
              // getCurrentPosition ＝ 現在位置を取得するメソッド
              navigator.geolocation.getCurrentPosition(
                (position) => {
                  const pos = {
                    // 現在位置の緯度・経度
                    lat: position.coords.latitude,
                    lng: position.coords.longitude,
                  };
                  // 現在位置にマーカー設置
                  infoWindow.setPosition(pos);
                  var marker = new google.maps.Marker({
                    map : map,         
                    position : pos
                  });
                  // マップの真ん中に「現在地」Windowを表示
                  infoWindow.setContent("Found you!　");
                  infoWindow.open(map);
                  map.setCenter(pos);
                  
                },
                // 現在位置の取得に失敗した時のエラーメッセージ
                () => {
                  handleLocationError(true, infoWindow, map.getCenter());
                }
              );
            // ブラウザがGeolocation APIに対応していない場合、エラーメッセージを表示
            } else {
              handleLocationError(false, infoWindow, map.getCenter());
            }
          });
        }
        
        // エラーメッセージ内容
        function handleLocationError(browserHasGeolocation, infoWindow, pos) {
          infoWindow.setPosition(pos);
          infoWindow.setContent(
            browserHasGeolocation
              ? "現在位置の取得に失敗しました。"
              : "ご使用中のブラウザは現在地検索に対応されておりません。"
          );
          infoWindow.open(map);
        }
        
        window.initMap = initMap;
    
  // 【投稿検索】
        function codeAddress() {
          let inputAddress = $('#address').val(); // テキストエリアから検索対象文字取得

          geocoder.geocode({'address': inputAddress}, function(results, status) {
            if (status === 'OK') { // 結果があれば
              map.setCenter(results[0].geometry.location); // 地図の中央をマーカーと揃える

              if (marker != undefined) {
                marker.setMap(null); // マーカーの初期化
              }

              // マーカー表示
              marker = new google.maps.Marker({
                position: results[0].geometry.location,
                map: map
              })

              // マーカーをクリックしたときのポップアップの中身
              infoWindow = new google.maps.InfoWindow({
                content: '<div class="p-3">' +
                        '<h5>' + inputAddress + '</h5>' +
                        '<h6 class="mt-4">' +
                        results[0].formatted_address.split('、')[1] +
                        '</h6>' +
                        // '、'より前には不要な(日本、)文字列があるので分割して2つ目の配列を取得
                        //️　以下、「投稿するボタンを押すことで」新規投稿画面にデータ（name,latitude,longitude,address）を送る
                        '<br><a href="<%= new_post_url %>' +
                        '?name=' +
                        inputAddress +
                        '&latitude=' +
                        results[0].geometry.location.lat() +
                        '&longitude=' +
                        results[0].geometry.location.lng() +
                        '&address=' +
                        results[0].formatted_address.split('、')[1] +
                        '"><h6 class="mt-2" style="color:#0066FF;">投稿する</h6></a>' +
                        '</div>'

              })

              // マーカーがクリックされたらinfoWindowを開く
              marker.addListener('click', function() {
                infoWindow.open(map, marker)
              })

            } else { // 検索した時に該当なしの場合、アラートを表示
              alert('該当なし');
            }
          })
        }

      </script>

      <!--APIキー-->
      <script src="https://maps.google.com/maps/api/js?key=<%= ENV['GOOGLE_MAP_API_KEY'] %>&language=ja&callback=initMap" data-turbolinks-track="reload"></script>

    </div>
  </div>
<!--ーーーーーーーーーーーーーーーーーーーーーーーーー（一覧画面）ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー-->
  <div class="row">
    <div class="col-12 col-md-12 mt-5">
    <!--検索-->
      <div class="mb-2">
        <%= form_with url: posts_path, method: :get, local: true do |f| %>
          <div class="d-flex justify-content-center">
            <i class="fas fa-search fa-lg mt-2 ml-2"></i>
            <%= f.text_field :search, class: "ml-2 mr-2 form-control w-50 border border-dark", value: params[:search], id: "searchBox" %>
            <%= f.submit 'search', class: "search-button btn btn-primary" %>
            <small id="clearSearch" class="clear-button ml-2 btn btn-secondary">クリア</small>
          </div>
        <% end %>
      </div>

      <!--検索ボックスの中をクリアに-->
      <script>
        $('#clearSearch').on('click', (e) => {
          $('#searchBox').val("")
          var url = new URL(window.location.href);
          url.searchParams.delete("search");
          window.history.pushState({}, '', url.toString());
        })
      </script>

      <!--投稿一覧-->
      <div class="post-list">
        <div class="row">
          <div class="col-12 col-md-12 d-flex justify-content-start flex-wrap px-0">
            <% @posts.each do |post| %>
              <%= render 'public/users/post', post: post %>
            <% end %>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
